name: .NET CI/CD

on:
  push:
    branches: [ 'main', 'develop', 'release/*' ]
  pull_request:
    branches: [ 'main', 'develop' ]

env:
  DOTNET_VERSION: '6.0.424'
  SOLUTION_FILE: DotNetCoreSqlDb.sln

jobs:
  build-test-deploy:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_FILE }}

    - name: Build
      run: dotnet build ${{ env.SOLUTION_FILE }} --configuration Release --no-restore

    - name: Run unit tests
      run: dotnet test ${{ env.SOLUTION_FILE }} --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage"

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3

    - name: Run security scan
      run: |
        dotnet tool install --global security-scan
        security-scan ${{ env.SOLUTION_FILE }} --export-results security-report.sarif

    - name: Upload security scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: security-report.sarif

    - name: Publish
      run: dotnet publish ${{ env.SOLUTION_FILE }} --configuration Release --no-build --output ${{github.workspace}}/publish

    - name: Deploy to IIS
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      env:
        IIS_SERVER_COMPUTER_NAME: ${{ secrets.IIS_SERVER_COMPUTER_NAME }}
        IIS_SERVER_USERNAME: ${{ secrets.IIS_SERVER_USERNAME }}
        IIS_SERVER_PASSWORD: ${{ secrets.IIS_SERVER_PASSWORD }}
        IIS_WEBSITE_NAME: ${{ secrets.IIS_WEBSITE_NAME }}
        IIS_WEBSITE_PATH: ${{ secrets.IIS_WEBSITE_PATH }}
      run: |
        $ErrorActionPreference = 'Stop'
        $SecurePassword = ConvertTo-SecureString $env:IIS_SERVER_PASSWORD -AsPlainText -Force
        $Credential = New-Object System.Management.Automation.PSCredential ($env:IIS_SERVER_USERNAME, $SecurePassword)
        
        # Configure TrustedHosts if not already configured
        Set-Item WSMan:\localhost\Client\TrustedHosts -Value $env:IIS_SERVER_COMPUTER_NAME -Force

        # Create a new PSSession with Basic authentication and allow unencrypted connections
        $SessionOption = New-PSSessionOption -SkipCACheck -SkipCNCheck -SkipRevocationCheck
        $Session = New-PSSession -ComputerName $env:IIS_SERVER_COMPUTER_NAME -Credential $Credential -Authentication Basic -SessionOption $SessionOption

        # Copy files to the remote server
        Copy-Item -Path "${{github.workspace}}/publish/*" -Destination $env:IIS_WEBSITE_PATH -ToSession $Session -Recurse -Force

        # Execute commands on the remote server
        Invoke-Command -Session $Session -ScriptBlock {
          Import-Module WebAdministration
          Stop-Website -Name $using:env:IIS_WEBSITE_NAME
          Start-Website -Name $using:env:IIS_WEBSITE_NAME
        }

        # Clean up the PSSession
        Remove-PSSession $Session